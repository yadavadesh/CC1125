#define F_CPU 16000000

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

// Register address
#define IOCFG3            0x00      //GPIO3 IO Pin Configuration
#define IOCFG2            0x01      //GPIO2 IO Pin Configuration
#define IOCFG1            0x02      //GPIO1 IO Pin Configuration
#define IOCFG0            0x03      //GPIO0 IO Pin Configuration
#define SYNC3             0x04      //Sync Word Configuration [31:24]
#define SYNC2             0x05      //Sync Word Configuration [23:16]
#define SYNC1             0x06      //Sync Word Configuration [15:8]
#define SYNC0             0x07      //Sync Word Configuration [7:0]
#define SYNC_CFG1         0x08      //Sync Word Detection Configuration Reg. 1
#define SYNC_CFG0         0x09      //Sync Word Length Configuration Reg. 0
#define DEVIATION_M       0x0A      //Frequency Deviation Configuration
#define MODCFG_DEV_E      0x0B      //Modulation Format and Frequency Deviation Configur..
#define DCFILT_CFG        0x0C      //Digital DC Removal Configuration
#define PREAMBLE_CFG1     0x0D      //Preamble Length Configuration Reg. 1
#define PREAMBLE_CFG0     0x0E      //Preamble Detection Configuration Reg. 0
#define FREQ_IF_CFG       0x0F      //RX Mixer Frequency Configuration
#define IQIC              0x10      //Digital Image Channel Compensation Configuration
#define CHAN_BW           0x11      //Channel Filter Configuration
#define MDMCFG1           0x12      //General Modem Parameter Configuration Reg. 1
#define MDMCFG0           0x13      //General Modem Parameter Configuration Reg. 0
#define SYMBOL_RATE2      0x14      //Symbol Rate Configuration Exponent and Mantissa [1..
#define SYMBOL_RATE1      0x15      //Symbol Rate Configuration Mantissa [15:8]
#define SYMBOL_RATE0      0x16      //Symbol Rate Configuration Mantissa [7:0]
#define AGC_REF           0x17      //AGC Reference Level Configuration
#define AGC_CS_THR        0x18      //Carrier Sense Threshold Configuration
#define AGC_GAIN_ADJUST   0x19      //RSSI Offset Configuration
#define AGC_CFG3          0x1A      //Automatic Gain Control Configuration Reg. 3
#define AGC_CFG2          0x1B      //Automatic Gain Control Configuration Reg. 2
#define AGC_CFG1          0x1C      //Automatic Gain Control Configuration Reg. 1
#define AGC_CFG0          0x1D      //Automatic Gain Control Configuration Reg. 0
#define FIFO_CFG          0x1E      //FIFO Configuration
#define DEV_ADDR          0x1F      //Device Address Configuration
#define SETTLING_CFG      0x20      //Frequency Synthesizer Calibration and Settling Con..
#define FS_CFG            0x21      //Frequency Synthesizer Configuration
#define WOR_CFG1          0x22      //eWOR Configuration Reg. 1
#define WOR_CFG0          0x23      //eWOR Configuration Reg. 0
#define WOR_EVENT0_MSB    0x24      //Event 0 Configuration MSB
#define WOR_EVENT0_LSB    0x25      //Event 0 Configuration LSB
#define PKT_CFG2          0x26      //Packet Configuration Reg. 2
#define PKT_CFG1          0x27      //Packet Configuration Reg. 1
#define PKT_CFG0          0x28      //Packet Configuration Reg. 0
#define RFEND_CFG1        0x29      //RFEND Configuration Reg. 1
#define RFEND_CFG0        0x2A      //RFEND Configuration Reg. 0
#define PA_CFG2           0x2B      //Power Amplifier Configuration Reg. 2
#define PA_CFG1           0x2C      //Power Amplifier Configuration Reg. 1
#define PA_CFG0           0x2D      //Power Amplifier Configuration Reg. 0
#define PKT_LEN           0x2E      //Packet Length Configuration

//Extended register address
#define IF_MIX_CFG        0x00      //IF Mix Configuration
#define FREQOFF_CFG       0x01      //Frequency Offset Correction Configuration
#define TOC_CFG           0x02      //Timing Offset Correction Configuration
#define MARC_SPARE        0x03      //MARC Spare
#define ECG_CFG           0x04      //External Clock Frequency Configuration
#define CFM_DATA_CFG      0x05      //Custom frequency modulation enable
#define EXT_CTRL          0x06      //External Control Configuration
#define RCCAL_FINE        0x07      //RC Oscillator Calibration Fine
#define RCCAL_COARSE      0x08      //RC Oscillator Calibration Coarse
#define RCCAL_OFFSET      0x09      //RC Oscillator Calibration Clock Offset
#define FREQOFF1          0x0A      //Frequency Offset MSB
#define FREQOFF0          0x0B      //Frequency Offset LSB
#define FREQ2             0x0C      //Frequency Configuration [23:16]
#define FREQ1             0x0D      //Frequency Configuration [15:8]
#define FREQ0             0x0E      //Frequency Configuration [7:0]
#define IF_ADC2           0x0F      //Analog to Digital Converter Configuration Reg. 2
#define IF_ADC1           0x10      //Analog to Digital Converter Configuration Reg. 1
#define IF_ADC0           0x11      //Analog to Digital Converter Configuration Reg. 0
#define FS_DIG1           0x12      //Frequency Synthesizer Digital Reg. 1
#define FS_DIG0           0x13      //Frequency Synthesizer Digital Reg. 0
#define FS_CAL3           0x14      //Frequency Synthesizer Calibration Reg. 3
#define FS_CAL2           0x15      //Frequency Synthesizer Calibration Reg. 2
#define FS_CAL1           0x16      //Frequency Synthesizer Calibration Reg. 1
#define FS_CAL0           0x17      //Frequency Synthesizer Calibration Reg. 0
#define FS_CHP            0x18      //Frequency Synthesizer Charge Pump Configuration
#define FS_DIVTWO         0x19      //Frequency Synthesizer Divide by 2
#define FS_DSM1           0x1A      //FS Digital Synthesizer Module Configuration Reg. 1
#define FS_DSM0           0x1B      //FS Digital Synthesizer Module Configuration Reg. 0
#define FS_DVC1           0x1C      //Frequency Synthesizer Divider Chain Configuration ..
#define FS_DVC0           0x1D      //Frequency Synthesizer Divider Chain Configuration ..
#define FS_LBI            0x1E      //Frequency Synthesizer Local Bias Configuration
#define FS_PFD            0x1F      //Frequency Synthesizer Phase Frequency Detector Con..
#define FS_PRE            0x20      //Frequency Synthesizer Prescaler Configuration
#define FS_REG_DIV_CML    0x21      //Frequency Synthesizer Divider Regulator Configurat..
#define FS_SPARE          0x22      //Frequency Synthesizer Spare
#define FS_VCO4           0x23      //FS Voltage Controlled Oscillator Configuration Reg..
#define FS_VCO3           0x24      //FS Voltage Controlled Oscillator Configuration Reg..
#define FS_VCO2           0x25      //FS Voltage Controlled Oscillator Configuration Reg..
#define FS_VCO1           0x26      //FS Voltage Controlled Oscillator Configuration Reg..
#define FS_VCO0           0x27      //FS Voltage Controlled Oscillator Configuration Reg..
#define GBIAS6            0x28      //Global Bias Configuration Reg. 6
#define GBIAS5            0x29      //Global Bias Configuration Reg. 5
#define GBIAS4            0x2A      //Global Bias Configuration Reg. 4
#define GBIAS3            0x2B      //Global Bias Configuration Reg. 3
#define GBIAS2            0x2C      //Global Bias Configuration Reg. 2
#define GBIAS1            0x2D      //Global Bias Configuration Reg. 1
#define GBIAS0            0x2E      //Global Bias Configuration Reg. 0
#define IFAMP             0x2F      //Intermediate Frequency Amplifier Configuration
#define LNA               0x30      //Low Noise Amplifier Configuration
#define RXMIX             0x31      //RX Mixer Configuration
#define XOSC5             0x32      //Crystal Oscillator Configuration Reg. 5
#define XOSC4             0x33      //Crystal Oscillator Configuration Reg. 4
#define XOSC3             0x34      //Crystal Oscillator Configuration Reg. 3
#define XOSC2             0x35      //Crystal Oscillator Configuration Reg. 2
#define XOSC1             0x36      //Crystal Oscillator Configuration Reg. 1
#define XOSC0             0x37      //Crystal Oscillator Configuration Reg. 0
#define ANALOG_SPARE      0x38      //Analog Spare
#define PA_CFG3           0x39      //Power Amplifier Configuration Reg. 3
#define WOR_TIME1         0x64      //eWOR Timer Counter Value MSB
#define WOR_TIME0         0x65      //eWOR Timer Counter Value LSB
#define WOR_CAPTURE1      0x66      //eWOR Timer Capture Value MSB
#define WOR_CAPTURE0      0x67      //eWOR Timer Capture Value LSB
#define BIST              0x68      //MARC Built-In Self-Test
#define DCFILTOFFSET_I1   0x69      //DC Filter Offset I MSB
#define DCFILTOFFSET_I0   0x6A      //DC Filter Offset I LSB
#define DCFILTOFFSET_Q1   0x6B      //DC Filter Offset Q MSB
#define DCFILTOFFSET_Q0   0x6C      //DC Filter Offset Q LSB
#define IQIE_I1           0x6D      //IQ Imbalance Value I MSB
#define IQIE_I0           0x6E      //IQ Imbalance Value I LSB
#define IQIE_Q1           0x6F      //IQ Imbalance Value Q MSB
#define IQIE_Q0           0x70      //IQ Imbalance Value Q LSB
#define RSSI1             0x71      //Received Signal Strength Indicator Reg. 1
#define RSSI0             0x72      //Received Signal Strength Indicator Reg.0
#define MARCSTATE         0x73      //MARC State
#define LQI_VAL           0x74      //Link Quality Indicator Value
#define PQT_SYNC_ERR      0x75      //Preamble and Sync Word Error
#define DEM_STATUS        0x76      //Demodulator Status
#define FREQOFF_EST1      0x77      //Frequency Offset Estimate MSB
#define FREQOFF_EST0      0x78      //Frequency Offset Estimate LSB
#define AGC_GAIN3         0x79      //Automatic Gain Control Reg. 3
#define AGC_GAIN2         0x7A      //Automatic Gain Control Reg. 2
#define AGC_GAIN1         0x7B      //Automatic Gain Control Reg. 1
#define AGC_GAIN0         0x7C      //Automatic Gain Control Reg. 0
#define CFM_RX_DATA_OUT   0x7D      //Custom Frequency Modulation RX Data
#define CFM_TX_DATA_IN    0x7E      //Custom Frequency Modulation TX Data
#define ASK_SOFT_RX_DATA  0x7F      //ASK Soft Decision Output
#define RNDGEN            0x80      //Random Number Generator Value
#define MAGN2             0x81      //Signal Magnitude after CORDIC [16]
#define MAGN1             0x82      //Signal Magnitude after CORDIC [15:8]
#define MAGN0             0x83      //Signal Magnitude after CORDIC [7:0]
#define ANG1              0x84      //Signal Angular after CORDIC [9:8]
#define ANG0              0x85      //Signal Angular after CORDIC [7:0]
#define CHFILT_I2         0x86      //Channel Filter Data Real Part [18:16]
#define CHFILT_I1         0x87      //Channel Filter Data Real Part [15:8]
#define CHFILT_I0         0x88      //Channel Filter Data Real Part [7:0]
#define CHFILT_Q2         0x89      //Channel Filter Data Imaginary Part [18:16]
#define CHFILT_Q1         0x8A      //Channel Filter Data Imaginary Part [15:8]
#define CHFILT_Q0         0x8B      //Channel Filter Data Imaginary Part [7:0]
#define GPIO_STATUS       0x8C      //General Purpose Input/Output Status
#define FSCAL_CTRL        0x8D      //Frequency Synthesizer Calibration Control
#define PHASE_ADJUST      0x8E      //Frequency Synthesizer Phase Adjust
#define PARTNUMBER        0x8F      //Part Number
#define PARTVERSION       0x90      //Part Revision
#define SERIAL_STATUS     0x91      //Serial Status
#define MODEM_STATUS1     0x92      //Modem Status Reg. 1
#define MODEM_STATUS0     0x93      //Modem Status Reg. 0
#define MARC_STATUS1      0x94      //MARC Status Reg. 1
#define MARC_STATUS0      0x95      //MARC Status Reg. 0
#define PA_IFAMP_TEST     0x96      //Power Amplifier Intermediate Frequency Amplifier T..
#define FSRF_TEST         0x97      //Frequency Synthesizer Test
#define PRE_TEST          0x98      //Frequency Synthesizer Prescaler Test
#define PRE_OVR           0x99      //Frequency Synthesizer Prescaler Override
#define ADC_TEST          0x9A      //Analog to Digital Converter Test
#define DVC_TEST          0x9B      //Digital Divider Chain Test
#define ATEST             0x9C      //Analog Test
#define ATEST_LVDS        0x9D      //Analog Test LVDS
#define ATEST_MODE        0x9E      //Analog Test Mode
#define XOSC_TEST1        0x9F      //Crystal Oscillator Test Reg. 1
#define XOSC_TEST0        0xA0      //Crystal Oscillator Test Reg. 0
#define RXFIRST           0xD2      //RX FIFO Pointer First Entry
#define TXFIRST           0xD3      //TX FIFO Pointer First Entry
#define RXLAST            0xD4      //RX FIFO Pointer Last Entry
#define TXLAST            0xD5      //TX FIFO Pointer Last Entry
#define NUM_TXBYTES       0xD6      //TX FIFO Status
#define NUM_RXBYTES       0xD7      //RX FIFO Status
#define FIFO_NUM_TXBYTES  0xD8      //TX FIFO Status
#define FIFO_NUM_RXBYTES  0xD9      //RX FIFO Status

// Strobe commands
#define SRES              0x30        // Reset chip.
#define SFSTXON           0x31        // Enable/calibrate freq synthesizer
#define SXOFF             0x32        // Turn off crystal oscillator.
#define SCAL              0x33        // Calibrate freq synthesizer & disable
#define SRX               0x34        // Enable RX.
#define STX               0x35        // Enable TX.
#define SIDLE             0x36        // Exit RX / TX
#define SWOR              0x38        // Start automatic RX polling sequence
#define SPWD              0x39        // Enter pwr down mode when CSn goes hi
#define SFRX              0x3A        // Flush the RX FIFO buffer.
#define SFTX              0x3B        // Flush the TX FIFO buffer.
#define SWORRST           0x3C        // Reset real time clock.
#define SNOP              0x3D        // No operation.

// Other memory locations
#define DIRECTFIFO        0x3E
#define STANDARDFIFO      0x3F

// Definitions to support burst/single access:
#define WRITE_SINGLE	  0x00
#define WRITE_BURST       0x40
#define READ_SINGLE       0x80
#define READ_BURST        0xC0

//Functions
/*
char read_reg(unsigned char addr)

void write_reg(unsigned char addr,unsigned char data)

void commandstrobe(unsigned char addr)

void init_cc1125()

char readdirectFIFO(unsigned char addr)

void receivedata(unsigned char *data)

*/

//Variables
uint8_t status, data;


void SPI_MASTER_Init(void)
{
	/*Set MOSI, SCK and SS as output*/
	DDRB = 0x07;
	PORTB |= (1<<PB0);
	/*Enable SPI, master, clk rate fck/16*/
	SPCR = 0x51;
}

void SPI_MASTER_Trans(uint8_t data)
{
	/*Start transmission*/
	SPDR = data;
	/*Wait for transmission to complete*/
	while(!(SPSR & 0x80));
}

uint8_t SPI_MASTER_Rec(void)
{
	/*Wait for reception to complete*/
	while(!(SPSR & 0x80));
	/*Return data*/
	return SPDR;
}

int main(void)
{
    SPI_MASTER_Init();
    DDRF=0xFF;
    PORTB &= ~(1<<PB0);
    SPI_MASTER_Trans(WRITE_SINGLE|IOCFG3);
    status = SPI_MASTER_Rec();
    _delay_ms(50);
    SPI_MASTER_Trans(0xB0);
    status = SPI_MASTER_Rec();
    _delay_ms(50);

    SPI_MASTER_Trans(READ_SINGLE|IOCFG3);
    status = SPI_MASTER_Rec();
    _delay_ms(50);
    data = SPI_MASTER_Rec();
    while (1) 
    {
    }
}
